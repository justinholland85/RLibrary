source("C:/Users/justi/Documents/GitHub/RLibrary/Start.R")
source("C:/Users/justi/Documents/GitHub/RLibrary/Start.R")
PathMap   <-  list("DESKTOP-MLKCE7A" = "C:/Users/justi/Documents/GitHub/RLibrary/",
"DELL2014"        = "C:/Users/Justin/Documents/GitHub/RLibrary",
"ALIEN2021"       = "C:/Users/justi/Documents/GitHub/RLibrary/",
"09503289-TMP449" = "C:/Users/09503289/Desktop/R - Codes/Justins Codes"
)
NodeName  <-  Sys.info()["nodename"]
Lib.Dir   <-  PathMap[[NodeName]]
Lib.Dir
ceiling(1500*runif(1))
######################################################################################################
source("C:/Users/justi/Documents/GitHub/RLibrary/Start.R")
F.Utility   <-  function(dT, Alpha, Lambda){
U  <-  sum(Alpha * Lambda^seq(0, dT-1))
return(U)
}
dT      <-  seq(0, 100)
Alpha   <-  1
Lambda  <-  .5
F.Utility(dT, Alphda, Lamda)
# F.Utility
dT      <-  seq(0, 100)
Alpha   <-  1
Lambda  <-  .5
F.Utility(dT, Alpha, Lamda)
# F.Utility
dT      <-  seq(0, 100)
Alpha   <-  1
Lambda  <-  .5
F.Utility(dT, Alpha, Lambda)
# F.Utility
dT      <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .5
F.Utility(dT, Alpha, Lambda)
# F.Utility
dT      <-  1
Alpha   <-  1
Lambda  <-  .5
F.Utility(dT, Alpha, Lambda)
# F.Utility
dT      <-  2
Alpha   <-  1
Lambda  <-  .5
F.Utility(dT, Alpha, Lambda)
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .5
i.DT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda)
}
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .5
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda)
}
i.dT
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .9
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda)
}
i.dT
i.dT  <-  unlist(i.dT)
i.dT
F.Utility   <-  function(dT, Alpha, Lambda, Tau){
U  <-  sum(Alpha * Lambda^(seq(0, dT-1) / Tau))
return(U)
}
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  10
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda)
}
i.dT  <-  unlist(i.dT)
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  10
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
Do.dT     <-  seq(1, 1000)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  10
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
# F.Utility
Do.dT     <-  seq(1, 1000)
Alpha   <-  1
Lambda  <-  1
Tau     <-  10
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
# F.Utility
Do.dT     <-  seq(1, 1000)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  1
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
Tau     <-  1
i.dT
i.dT
# F.Utility
Do.dT     <-  seq(1, 1000)
Alpha   <-  1
Lambda  <-  .5
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda)
}
i.dT  <-  unlist(i.dT)
F.Utility   <-  function(dT, Alpha, Lambda){
U  <-  sum(Alpha * Lambda^(seq(0, dT-1) ))
return(U)
}
######################################################################################################
# F.Utility
Do.dT     <-  seq(1, 1000)
Alpha   <-  1
Lambda  <-  .5
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda)
}
i.dT  <-  unlist(i.dT)
i.dT
F.Utility   <-  function(dT, Alpha, Lambda){
U  <-  sum(Alpha * Lambda^((seq(0, dT-1) / Tau) ))
return(U)
}
######################################################################################################
# F.Utility
Do.dT     <-  seq(1, 1000)
Alpha   <-  1
Lambda  <-  .5
Tau     <-  5
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
F.Utility   <-  function(dT, Alpha, Lambda, Tau){
U  <-  sum(Alpha * Lambda^((seq(0, dT-1) / Tau) ))
return(U)
}
######################################################################################################
# F.Utility
Do.dT     <-  seq(1, 1000)
Alpha   <-  1
Lambda  <-  .5
Tau     <-  5
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .5
Tau     <-  5
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
Do.dT
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .5
Tau     <-  1
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  1
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  2
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
F.Utility   <-  function(dT, Alpha, Lambda, Tau){
U  <-  sum(Alpha * Lambda^((seq(0, dT-1) / Tau) )) / Tau
return(U)
}
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  2
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
# F.Utility
Do.dT     <-  seq(1, 100)
Alpha   <-  1
Lambda  <-  .9
Tau     <-  1
i.dT    <-  list()
for(i in 1:length(Do.dT)){
i.dT[i]   <-   F.Utility(Do.dT[i], Alpha, Lambda, Tau)
}
i.dT  <-  unlist(i.dT)
i.dT
X.x         <-  runif()
X.x         <-  runif(N.Test)
N.Test      <-  10
X.x         <-  runif(N.Test)
X.x
N.Test      <-  10
Max.x       <-  100
Max.y       <-  100
X.x         <-  Max.x  * runif(N.Test, -1, 1)
X.x
g.x         <-  Max.x  * runif(N.Test, -1, 1)
g.y         <-  Max.y  * runif(N.Test, -1, 1)
g.x
g.y
N.Test      <-  10
Max.x       <-  100
Max.y       <-  100
g.x         <-  Max.x  * runif(N.Test, -1, 1)
g.y         <-  Max.y  * runif(N.Test, -1, 1)
g.P         <-  runif(N.Test, 0, 5)
g.P
g.x         <-  Max.x  * runif(N.Test, -1, 1)
g.y         <-  Max.y  * runif(N.Test, -1, 1)
g.P         <-  runif(N.Test, 0, 5)
Market.g    <-   list("x" = g.x,
"y" = g.y,
"P" = g.P)
Market.g
I.x         <-  0
I.y         <-  0
F.Dist    <- function(I.x, I.y, x, y){
return( ((I.X  - x) ^ 2 + (I.y - y) ^ 2)^.5)
}
I.dist      <-  F.Dist(I.x, I.y, g.x, g.y)
return( ((I.x  - x) ^ 2 + (I.y - y) ^ 2)^.5)
}
F.Dist    <- function(I.x, I.y, x, y){
return( ((I.x  - x) ^ 2 + (I.y - y) ^ 2)^.5)
}
I.dist      <-  F.Dist(I.x, I.y, g.x, g.y)
I.dist
h.x         <-  Max.x  * runif(N.Test, -1, 1)
h.y         <-  Max.y  * runif(N.Test, -1, 1)
g.P         <-  runif(N.Test, 0, .1)
g.P
Market.h    <-   list("x" = h.x,
"y" = h.y,
"P" = h.P)
g   <-  1
h   <-  1
g.x   <-  Market.g$x[g]
g.y   <-  Market.g$y[g]
h.x   <-  Market.h$x[h]
h.y   <-  Market.h$y[h]
Market.h    <-   list("x" = h.x,
"y" = h.y,
"P" = h.P)
h.x         <-  Max.x  * runif(N.Test, -1, 1)
h.y         <-  Max.y  * runif(N.Test, -1, 1)
h.P         <-  runif(N.Test, 0, .1)
Market.h    <-   list("x" = h.x,
"y" = h.y,
"P" = h.P)
g   <-  1
h   <-  1
g.x   <-  Market.g$x[g]
g.y   <-  Market.g$y[g]
h.x   <-  Market.h$x[h]
h.y   <-  Market.h$y[h]
d1             <-  F.Dist(I.X, I.Y, g.x, g.y)
I.x         <-  0
I.y         <-  0
d1             <-  F.Dist(I.X, I.Y, g.x, g.y)
F.Dist    <- function(I.x, I.y, x, y){
return( ((I.x  - x) ^ 2 + (I.y - y) ^ 2)^.5)
}
d1             <-  F.Dist(I.X, I.Y, g.x, g.y)
d1             <-  F.Dist(I.x, I.y, g.x, g.y)
d1
d2             <-  F.Dist(g.x, g.y, h.x, h.y)
d2
d1             <-  F.Dist(I.x, I.y, g.x, g.y)
d2             <-  F.Dist(g.x, g.y, h.x, h.y)
d3             <-  F.Dist(h.x, h.y, I.x, I.y)
d1
d2
d3
F.Triangulate(I.x, I.y, g.x, g.y, h.x, h.y)
F.Triangulate    <-  function(I.x, I.y, g.x, g.y, h.x, h.y){
d1             <-  F.Dist(I.x, I.y, g.x, g.y)
d2             <-  F.Dist(g.x, g.y, h.x, h.y)
d3             <-  F.Dist(h.x, h.y, I.x, I.y)
d              <-  d1 +  d2 + d3
return(s)
}
F.Triangulate(I.x, I.y, g.x, g.y, h.x, h.y)
F.Triangulate    <-  function(I.x, I.y, g.x, g.y, h.x, h.y){
d1             <-  F.Dist(I.x, I.y, g.x, g.y)
d2             <-  F.Dist(g.x, g.y, h.x, h.y)
d3             <-  F.Dist(h.x, h.y, I.x, I.y)
d              <-  d1 +  d2 + d3
return(d)
}
F.Triangulate(I.x, I.y, g.x, g.y, h.x, h.y)
