source("C:/Users/justi/Documents/GitHub/RLibrary/Start.R")
source("C:/Users/justi/Documents/GitHub/RLibrary/Start.R")
PathMap   <-  list("DESKTOP-MLKCE7A" = "C:/Users/justi/Documents/GitHub/RLibrary/",
"DELL2014"        = "C:/Users/Justin/Documents/GitHub/RLibrary",
"ALIEN2021"       = "C:/Users/justi/Documents/GitHub/RLibrary/",
"09503289-TMP449" = "C:/Users/09503289/Desktop/R - Codes/Justins Codes"
)
NodeName  <-  Sys.info()["nodename"]
Lib.Dir   <-  PathMap[[NodeName]]
Lib.Dir
ceiling(1500*runif(1))
.9 * 45 + 12.5
32 / 40
1 / 60
.8 / 60
20 / .166
.20 / .166
.8 * 60
ceiling(2400 * runif(1))
15 / 65
240 / 320
75 % * 18
.75 * 18
<!-- ############################################################################################# -->
ceiling(4000 * 1.02 * runif(5))
ceiling(566  * runif(1))
ceiling(2737 * 1.02 * runif(4))
install.packages("bunchit")
install.packages('Rtools')
library(bunchit)
install.packages("getSheets")
install.packages('purr')
install.packages('xlsx2')
install.packages('xmlToDataFrame')
rm(list = ls())
gc()
.45 * 60
.35 * 60
5 * 7.35
29.4 * .4
11.76 - 7.35
7.35 - 4.41
100 / 360
1 + 1
getwd()
list.files()
ceiling(3039 * 1.02 * runif(5))
ceiling(3059 * 1.02 * runif(4))
ceiling(3059 * 1.02 * runif(4))
install.packages("devtools")
install.packages("roxygen2")
url("https://ourcodingclub.github.io/tutorials/writing-r-package/")
browseURL("https://ourcodingclub.github.io/tutorials/writing-r-package/")
ceiling(3930 * 1.02 * runif(4))
library(tidyverse)
install.packages("tidyverse", "cpp11", "lubridate", "tictoc"  )
library(tidyverse)
install.packages
install.packages("tidyverse")
install.packages("cpp11")
install.packages("lubridate")
install.packages("tictoc")
library(tidyverse)
library(cpp11)
library(lubridate)
library(tictoc)
# Re-compile C++ generator
cpp_source("code/src/generate_week.cpp")
cpp_source("C:/Users/justi/OneDrive/R_Centre/Will Mackey/code/src/generate_week.cpp")
cpp_source
cpp_source("C:/Users/justi/OneDrive/R_Centre/Will Mackey/code/src/generate_week.cpp")
# Re-compile C++ generator
cpp_source("C:/Users/justi/OneDrive/R_Centre/Will Mackey/code/src/generate_week.cpp", verbose = TRUE)
getAnywhere(cpp_source)
Sys.setenv(CPP11_VERBOSE = 1)
cpp11::cpp_source("C:/Users/justi/OneDrive/R_Centre/Will Mackey/code/src/generate_week.cpp")
library(tidyverse)
library(cpp11)
library(lubridate)
library(tictoc)
cpp_source("C:/Users/justi/OneDrive/R_Centre/Will Mackey/code/src/generate_week.cpp", verbose = TRUE)
# Re-compile C++ generator
cpp_source("C:/Users/justi/OneDrive/R_Centre/Will Mackey/code/src/generate_week.cpp")
Sys.setenv()
Sys.setenv("CPP11_VERBOSE" = 1)
cpp11::cpp_source("C:/Users/justi/OneDrive/R_Centre/Will Mackey/code/src/generate_week.cpp")
Sys.which("g++")
library(tidyverse)
library(cpp11)
library(lubridate)
library(tictoc)
rary(tictoc)
cpp_source("C/Users/justi/Documents/Model/R Centre/Code/Will Mackey/code/src/generate_week.cpp")
# Re-compile C++ generator
cpp_source("C:/Users/justi/Documents/Model/R Centre/Code/Will Mackey/code/src/generate_week.cpp")
# Re-compile C++ generator
cpp_source("C:/Users/justi/Documents/Model/R Centre/Code/Will Mackey/code/src/generate_week.cpp")
# install.packages("tidyverse")
# install.packages("cpp11")
# install.packages("lubridate")
# install.packages("tictoc")
library(tidyverse)
library(cpp11)
library(lubridate)
library(tictoc)
# Re-compile C++ generator
cpp_source("C:/Users/justi/Documents/Model/R Centre/Code/Will Mackey/code/src/generate_week.cpp")
# Re-compile C++ generator
cpp_source("C:/Users/justi/Documents/Model/R Centre/Code/Will Mackey/code/src/generate_week.cpp")
# Re-compile C++ generator
cpp_source("C:/Users/justi/Documents/Model/R Centre/Code/Will Mackey/code/src/generate_week.cpp")
# Re-compile C++ generator
cpp_source("C:/Users/justi/Documents/Model/R Centre/Code/Will Mackey/code/src/generate_week.cpp")
getwd()
unlink
# Params
simulation_size      <- 10e6
dest_path_base       <- "data/raw/stp/STP_BSLN_"
start                <- ymd("2021-01-01")
end                  <- ymd("2024-12-31")
weeks_seq            <- seq(start, end, by = "week")
weeks                <- length(weeks_seq)
n_ind                <- as.integer(simulation_size)
n_emp                <- as.integer(simulation_size / 15)
# Income & churn vectors
base_mean_income     <- 1500
sigma_income         <- 1.1
meanlog              <- log(base_mean_income) - sigma_income^2/2
base_mean_vec        <- rlnorm(n_ind, meanlog, sigma_income)
sd_scaling           <- round(rbeta(n_ind, 0.6, 1) * 0.4, 1)  # 0–0.5
sd_vec               <- base_mean_vec * sd_scaling
p_initial            <- 0.95
p_start_vec          <- 0.0015
p_stop_vec           <- 0.0010
p_switch_vec         <- 0.0025
p_overlap_switch     <- 0.5
annual_income_growth <- 0.0
# New business-level params
p_close_biz          <- 0.001   # 0.1% chance/week to close
p_open_biz           <- 0.001   # 0.1% chance/week to open
p_switch_biz         <- 0.0005  # 0.05% chance/week to migrate
# One-off spike payment params
p_spike_ind          <- 0.05    # % of individuals eligible
p_spike_week         <- 0.02    # % chance/week for eligible
# Missing values
p_missing_income     <- 0.01    # % missing (not recorded) values
# clear files
unlink("data/raw/stp", recursive = TRUE)
# Run simulation
tibble(
week_index = seq_along(weeks_seq) - 1L,
date        = weeks_seq,
date_str    = toupper(format(date, "%d%b%Y")),
year_month  = format(date,   "%Y_%m")
) %>%
group_by(year_month) %>%
group_walk(~ {
dest_path <- paste0(dest_path_base, .y$year_month, ".csv")
tic()
walk(.x$week_index, ~ generate_week_csv(
week_index            = .x,
total_weeks           = weeks,
n_individuals         = n_ind,
n_employers           = n_emp,
path_csv              = dest_path,
base_mean_vec         = base_mean_vec,
sd_vec                = sd_vec,
p_initial             = p_initial,
p_start_vec           = p_start_vec,
p_stop_vec            = p_stop_vec,
p_switch_vec          = p_switch_vec,
annual_income_growth  = annual_income_growth,
p_close_biz           = p_close_biz,
p_open_biz            = p_open_biz,
p_switch_biz          = p_switch_biz,
p_spike_ind           = p_spike_ind,
p_spike_week          = p_spike_week,
p_overlap_switch      = p_overlap_switch,
p_missing_income      = p_missing_income
))
toc()
message(
"Finished ", .y$year_month, " (",
first(.x$date_str), " – ", last(.x$date_str), ") → ", dest_path
)
})
cumsum(!is.na(x))
x <- c(NA, 1, NA, 2, NA, NA, 3)
cumsum(!is.na(x))
cumsum(!is.na(x))[is.na(x)]
x[cumsum(!is.na(x))[is.na(x)]]
x
FALSE == 0
X[Y == 1]  <-  X[cumsum(Y == 0)][Y == 1]
X <- c(NA, 1, NA, 2, NA, NA, 3)
X[Y == 1]  <-  X[cumsum(Y == 0)][Y == 1]
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y   <-  is.na(X)
X[Y == 1]  <-  X[cumsum(Y == 0)][Y == 1]
X
cumsum(Y == 0)
source("C:/Users/justi/OneDrive/Documents/GitHub/RLibrary/Start.R")
x <- c(NA, 1, NA, 2, NA, NA, 3)
Lib.FillDown(x, is.na(x))
Lib.FillDown
x <- c(NA, 1, NA, 2, NA, NA, 3)
Lib.FillDown(x, is.na(x))
is.na(x)
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y  <-  is.na(Y)
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y  <-  is.na(X)
Lib.FillDown(X, Y)
Y
[cumsum(Y == 0)
cumsum(Y == 0)
X[cumsum(Y == 0)]
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y  <-  is.na(X)
X[is.na(X)] <- X[cumsum(!is.na(X))[is.na(X)]]
X <- c(NA, 1, NA, 2, NA, NA, 3)
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y  <-  is.na(X)
Lib.FillDown(X, Y)
X[is.na(X)] <- X[cumsum(!is.na(X))[is.na(X)]]
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y  <-  is.na(X)
X[Y == 1]  <-  X[cumsum(Y == 0)][Y == 1]
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y  <-  is.na(X)
X[is.na(X)] <- X[cumsum(!is.na(X))[is.na(X)]]
x <- c(NA, 1, NA, 2, NA, NA, 3)
x[is.na(x)] <- x[cumsum(!is.na(x))[is.na(x)]]
x
x <- c(NA, 1, NA, 2, NA, NA, 3)
x[is.na(x)] <- x[cumsum(!is.na(x))[is.na(x)]]
x
cumsum(Y == 0)
X[cumsum(Y == 0)]
Y
x <- c(NA, 1, NA, 2, NA, NA, 3)
x[is.na(x)]
x[cumsum(!is.na(x))[is.na(x)]]
cumsum(Y == 0)
CumSum    <-  cumsum(Y == 0)
data.frame(X, CumSum)
X <- c(NA, 1, NA, 2, NA, NA, 3)
X <- c(NA, 1, NA, 2, NA, NA, 3)
Y  <-  is.na(X)
CumSum    <-  cumsum(Y == 0)
data.frame(X, CumSum)
ceiling(4088 * 1.02 * runif(5))
X.CumSum  <-  x[cumsum(!is.na(x))
X.CumSum  <-  X[cumsum(!is.na(X))
X.CumSum  <-  X[cumsum(!is.na(X))]
X.CumSum
x <- c(NA, 1, NA, 2, NA, NA, 3)
x[is.na(x)] <- x[cumsum(!is.na(x))[is.na(x)]]
