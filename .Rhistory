K.Mu[[k]]   <-  Mu.Var
K.q50[[k]]  <-  q50.Var
print(paste0("v = ", v, "; k = ", k))
}
V.Mu[[v]]   <-  K.Mu
V.q50[[v]]  <-  K.q50
}
tapply(rowSums(Filt.Var > 0), Decile, table)
Count.Var    <-  rowSums(Filt.Var[ , Col.0:Col.B] > 0)
tapply(Count.Var, Decile, table)
cYrNZ.Var   <-  tapply(Count.Var, Decile, table)
cYrNZ.Var
cYrNZ.Var   <-  Lib.MapListToSet(cYrNZ.Var, seq(0,N.Cols))
cYrNZ.Var
Lib.MapListToSet
lapply(cYrNZ.Var, class)
cYrNZ.Var   <-  do.call(rbind, cYrNZ.Var)
cYrNZ.Var
cYrNZ.Var   <-  Lib.NA.To.Zero(do.call(rbind, cYrNZ.Var))
cYrNZ.Var   <-  tapply(Count.Var, Decile, table)
cYrNZ.Var   <-  Lib.MapListToSet(cYrNZ.Var, seq(0,N.Cols))
cYrNZ.Var   <-  Lib.NA.To.Zero(do.call(rbind, cYrNZ.Var))
cYrNZ.Var
pYrNZ.Var   <-  round(cYrNZ.Var / rowSums(cYrNZ.Var), 3)
pYrNZ.Var
K.pYrsNZ     <-  list()
#----
Do.Ages         <-  c(40,45,50,55)
Do.Genders      <-  c("M", "F")
Do.Pars         <-  list("Do.Ages"    = Do.Ages,
"Do.Genders" = Do.Genders)
ParCombos       <-  expand.grid(Do.Pars)
N.Combos        <-  nrow(ParCombos)
Do.Vars         <-  list("Var1" = Dummy.Var1,
"Var2" = Dummy.Var2 )
Var.Dec         <-  Dummy.Var1
N.Do.Vars        <-  length(Do.Vars)
#----
Col.0         <-  match(2010, Years.Alife)
Col.A         <-  match(2010, Years.Alife)
Col.B         <-  match(2017, Years.Alife)
Col.Seq       <-  seq(Col.A, Col.B)
N.Cols        <-  length(Col.Seq)
V.Mu          <-  list()
V.q50         <-  list()
V.pNZ         <-  list()
V.pYrsNZ      <-  list()
for(v in 1:N.Do.Vars){
Var         <-  Do.Vars[[v]]
K.Mu        <-  list()
K.q50       <-  list()
K.pNZ       <-  list()
K.pYrsNZ    <-  list()
for(k in 1:N.Combos){
Par.Age      <-  ParCombos$Do.Ages[k]
Par.Gender   <-  as.character(ParCombos$Do.Genders[k])
#---
Filter       <-  which(Dummy.Age        == Par.Age &
Dummy.Gender     == Par.Gender &
Var.Dec[ ,Col.0] >  0)
Filt.Var     <-  Var[Filter, ]
Filt.Var.Dec <-  Var.Dec[Filter, Col.0]
DecileVals   <-  quantile(Filt.Var.Dec, seq(.1, .9, .1) )
Decile       <-  Lib.RangeMap(Filt.Var.Dec, c(0, DecileVals, Inf) )
Mu.Var       <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
q50.Var      <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
cNZ.Var      <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
Total.Var    <-  rowSums(Filt.Var[ , Col.0:Col.B])
Count.Var    <-  rowSums(Filt.Var[ , Col.0:Col.B] > 0)
for(i in 1:N.Cols){
i.Col   <-  Col.Seq[i]
Mu.Var[ ,i]   <-  tapply(Filt.Var[,i.Col], Decile, mean)
q50.Var[ ,i]  <-  tapply(Filt.Var[,i.Col], Decile, quantile, probs = .5)
pNZ.Var[ ,i]  <-  tapply(Filt.Var[,i.Col] > 0, Decile, mean)
}
Mu.Var[  ,N.Cols + 1]   <-  tapply(Total.Var, Decile, mean)
q50.Var[ ,N.Cols + 1]   <-  tapply(Total.Var, Decile, quantile, probs = .5)
pNZ.Var[ ,N.Cols + 1]   <-  tapply(Total.Var > 0, Decile, mean)
#-- Year count table
cYrsNZ.Var   <-  tapply(Count.Var, Decile, table)
cYrsNZ.Var   <-  Lib.MapListToSet(cYrsNZ.Var, seq(0,N.Cols))
cYrsNZ.Var   <-  Lib.NA.To.Zero(do.call(rbind, cYrsNZ.Var))
pYrsNZ.Var   <-  round(cYrsNZ.Var / rowSums(cYrsNZ.Var), 3)
# --- Store for cohort
K.Mu[[k]]      <-  Mu.Var
K.q50[[k]]     <-  q50.Var
K.pNZ[[k]]     <-  pNZ.Var
K.pYrsNZ[[k]]  <-  pYrsNZ.Var
print(paste0("v = ", v, "; k = ", k))
}
#--- Store for variable
V.Mu[[v]]      <-  K.Mu
V.q50[[v]]     <-  K.q50
V.pNZ[[v]]     <-  K.pNZ
V.pYrsNZ[[k]]  <-  K.pYrsNZ
}
#----
Col.0         <-  match(2010, Years.Alife)
Col.A         <-  match(2010, Years.Alife)
Col.B         <-  match(2017, Years.Alife)
Col.Seq       <-  seq(Col.A, Col.B)
N.Cols        <-  length(Col.Seq)
V.Mu          <-  list()
V.q50         <-  list()
V.pNZ         <-  list()
V.pYrsNZ      <-  list()
for(v in 1:N.Do.Vars){
Var         <-  Do.Vars[[v]]
K.Mu        <-  list()
K.q50       <-  list()
K.pNZ       <-  list()
K.pYrsNZ    <-  list()
for(k in 1:N.Combos){
Par.Age      <-  ParCombos$Do.Ages[k]
Par.Gender   <-  as.character(ParCombos$Do.Genders[k])
#---
Filter       <-  which(Dummy.Age        == Par.Age &
Dummy.Gender     == Par.Gender &
Var.Dec[ ,Col.0] >  0)
Filt.Var     <-  Var[Filter, ]
Filt.Var.Dec <-  Var.Dec[Filter, Col.0]
DecileVals   <-  quantile(Filt.Var.Dec, seq(.1, .9, .1) )
Decile       <-  Lib.RangeMap(Filt.Var.Dec, c(0, DecileVals, Inf) )
Mu.Var       <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
q50.Var      <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
pNZ.Var      <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
Total.Var    <-  rowSums(Filt.Var[ , Col.0:Col.B])
Count.Var    <-  rowSums(Filt.Var[ , Col.0:Col.B] > 0)
for(i in 1:N.Cols){
i.Col   <-  Col.Seq[i]
Mu.Var[ ,i]   <-  tapply(Filt.Var[,i.Col], Decile, mean)
q50.Var[ ,i]  <-  tapply(Filt.Var[,i.Col], Decile, quantile, probs = .5)
pNZ.Var[ ,i]  <-  tapply(Filt.Var[,i.Col] > 0, Decile, mean)
}
Mu.Var[  ,N.Cols + 1]   <-  tapply(Total.Var, Decile, mean)
q50.Var[ ,N.Cols + 1]   <-  tapply(Total.Var, Decile, quantile, probs = .5)
pNZ.Var[ ,N.Cols + 1]   <-  tapply(Total.Var > 0, Decile, mean)
#-- Year count table
cYrsNZ.Var   <-  tapply(Count.Var, Decile, table)
cYrsNZ.Var   <-  Lib.MapListToSet(cYrsNZ.Var, seq(0,N.Cols))
cYrsNZ.Var   <-  Lib.NA.To.Zero(do.call(rbind, cYrsNZ.Var))
pYrsNZ.Var   <-  round(cYrsNZ.Var / rowSums(cYrsNZ.Var), 3)
# --- Store for cohort
K.Mu[[k]]      <-  Mu.Var
K.q50[[k]]     <-  q50.Var
K.pNZ[[k]]     <-  pNZ.Var
K.pYrsNZ[[k]]  <-  pYrsNZ.Var
print(paste0("v = ", v, "; k = ", k))
}
#--- Store for variable
V.Mu[[v]]      <-  K.Mu
V.q50[[v]]     <-  K.q50
V.pNZ[[v]]     <-  K.pNZ
V.pYrsNZ[[k]]  <-  K.pYrsNZ
}
####################
V.pYrsNZ
ols        <-  length(Col.Seq)
V.Mu          <-  list()
V.q50         <-  list()
V.pNZ         <-  list()
V.pYrsNZ      <-  list()
for(v in 1:N.Do.Vars){
Var         <-  Do.Vars[[v]]
K.Mu        <-  list()
K.q50       <-  list()
K.pNZ       <-  list()
K.pYrsNZ    <-  list()
for(k in 1:N.Combos){
Par.Age      <-  ParCombos$Do.Ages[k]
Par.Gender   <-  as.character(ParCombos$Do.Genders[k])
#---
Filter       <-  which(Dummy.Age        == Par.Age &
Dummy.Gender     == Par.Gender &
Var.Dec[ ,Col.0] >  0)
Filt.Var     <-  Var[Filter, ]
Filt.Var.Dec <-  Var.Dec[Filter, Col.0]
DecileVals   <-  quantile(Filt.Var.Dec, seq(.1, .9, .1) )
Decile       <-  Lib.RangeMap(Filt.Var.Dec, c(0, DecileVals, Inf) )
Mu.Var       <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
q50.Var      <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
pNZ.Var      <-  array(dim=c(10, N.Cols + 1), dimnames = list(paste0("D", seq(1,10)),
c(Years.Alife[Col.Seq], "Total")))
Total.Var    <-  rowSums(Filt.Var[ , Col.0:Col.B])
Count.Var    <-  rowSums(Filt.Var[ , Col.0:Col.B] > 0)
for(i in 1:N.Cols){
i.Col   <-  Col.Seq[i]
Mu.Var[ ,i]   <-  tapply(Filt.Var[,i.Col], Decile, mean)
q50.Var[ ,i]  <-  tapply(Filt.Var[,i.Col], Decile, quantile, probs = .5)
pNZ.Var[ ,i]  <-  tapply(Filt.Var[,i.Col] > 0, Decile, mean)
}
Mu.Var[  ,N.Cols + 1]   <-  tapply(Total.Var, Decile, mean)
q50.Var[ ,N.Cols + 1]   <-  tapply(Total.Var, Decile, quantile, probs = .5)
pNZ.Var[ ,N.Cols + 1]   <-  tapply(Total.Var > 0, Decile, mean)
#-- Year count table
cYrsNZ.Var   <-  tapply(Count.Var, Decile, table)
cYrsNZ.Var   <-  Lib.MapListToSet(cYrsNZ.Var, seq(0,N.Cols))
cYrsNZ.Var   <-  Lib.NA.To.Zero(do.call(rbind, cYrsNZ.Var))
pYrsNZ.Var   <-  round(cYrsNZ.Var / rowSums(cYrsNZ.Var), 3)
# --- Store for cohort
K.Mu[[k]]      <-  Mu.Var
K.q50[[k]]     <-  q50.Var
K.pNZ[[k]]     <-  pNZ.Var
K.pYrsNZ[[k]]  <-  pYrsNZ.Var
print(paste0("v = ", v, "; k = ", k))
}
#--- Store for variable
V.Mu[[v]]      <-  K.Mu
V.q50[[v]]     <-  K.q50
V.pNZ[[v]]     <-  K.pNZ
V.pYrsNZ[[v]]  <-  K.pYrsNZ
}
####################
V.pYrsNZ
V.Mu
V.pNZ
quantile(numeric(0), probs = .5)
par()$xpd
source("C:/Users/Justin/Documents/GitHub/RLibrary/Start.R")
States    <-  LETTERS[1:8]
Genders   <-  c("F", "M")
States    <-  LETTERS[1:8]
Ages      <-  seq(1,100)
N <-  10000
Y1  <-  ceiling(runif(N, 0, 6))
N <-  10000
Y1        <-  ceiling(runif(N, 0, 6))
Y1.N      <-  length(Y1)
Y1.Mu.X1  <-  runif(Y1.N, -5, 5)
Y1.Mu.X1
Y1.N      <-  6
Y1        <-  ceiling(runif(N, 0, Y1.N))
Y1.Mu.X1  <-  runif(Y1.N, -5, 5)
Y1.Mu.X1
Y1
Y1.Sig.X1  <-  runif(Y1.N, 1, 10)
Y1.Sig.X1
X1  <-  rnorm(mean = Y1.Mu.X1)
X1  <-  rnorm(N, mean = Y1.Mu.X1, sd = Y1.Sig.X1)
Y1.N       <-  6
Y1         <-  ceiling(runif(N, 0, Y1.N))
Y1.Mu.X1   <-  runif(Y1.N, -5, 5)[Y1]
Y1.Sig.X1  <-  runif(Y1.N, 1, 10)[Y1]
X1  <-  rnorm(N, mean = Y1.Mu.X1, sd = Y1.Sig.X1)
tapply(X1, mean, Y1 )
tapply(X1, Y1, mean )
Y1.Mu.X1
A.N <-  10000
Y1.N       <-  6
Y1.Mu.X1   <-  runif(Y1.N, -5, 5)
Y1.Sig.X1  <-  runif(Y1.N, 1, 10)
A.Y1         <-  ceiling(runif(N, 0, Y1.N))
A.Mu.X1     <-  runif(Y1.N, -5, 5)[A.Y1]
A.MuSig.X1  <-  runif(Y1.N, 1, 10)[A.Y1]
A.N <-  10000
Y1.N         <-  6
Y1.Mu.X1     <-  runif(Y1.N, -5, 5)
Y1.Sig.X1    <-  runif(Y1.N, 1, 10)
A.Y1         <-  ceiling(runif(N, 0, Y1.N))
A.Mu.X1      <-  runif(Y1.N, -5, 5)[A.Y1]
A.Sig.X1     <-  runif(Y1.N, 1, 10)[A.Y1]
A.Sig.X1
Y1.Sig.X1
X1  <-  rnorm(N, mean = A.Mu.X1, sd = A.Sig.X1)
A.N <-  10000
Y1.N         <-  6
Y1.Mu.X1     <-  runif(Y1.N, -5, 5)
Y1.Sig.X1    <-  runif(Y1.N, 1, 10)
A.Y1         <-  ceiling(runif(N, 0, Y1.N))
A.Mu.X1      <-  Y1.Mu.X1[A.Y1]
A.Sig.X1     <-  Y1.Sig.X1[A.Y1]
X1  <-  rnorm(N, mean = A.Mu.X1, sd = A.Sig.X1)
tapply(X1, Y1, mean )
A.Mu.X1
Y1.Mu.X1
tapply(X1, Y1, mean )
Y1.Mu.X1
X1  <-  rnorm(N, mean = A.Mu.X1, sd = A.Sig.X1)
Y1.Sig.X1
A.N <-  10000
Y1.N         <-  6
Y1.Mu.X1     <-  runif(Y1.N, -5, 5)
Y1.Sig.X1    <-  runif(Y1.N, 1, 10)
A.Y1         <-  ceiling(runif(N, 0, Y1.N))
A.Mu.X1      <-  Y1.Mu.X1[A.Y1]
A.Sig.X1     <-  Y1.Sig.X1[A.Y1]
X1  <-  rnorm(N, mean = A.Mu.X1, sd = A.Sig.X1)
tapply(X1, Y1, mean )
A.Mu.X1
A.Sig.X1
X1  <-  rnorm(N, mean = A.Mu.X1, sd = A.Sig.X1)
X1
A.Mu.X1
tapply(X1, Y1, mean )
A.Mu.X1
# Arbitrary Uniform Weight
Lib.Arb.Unif.Weight <-  function(N, Min, Max){
Omega  <-  runif(N, Min, Max)
P      <-  Omega / sum(Omega)
return(P)
}
# Arbitrary Uniform Weight
Lib.Arb.Unif.Weight <-  function(N, Min, Max){
if(missing(Min)){Min  <-  1}
if(missing(Max)){Max  <-  100}
Omega  <-  runif(N, Min, Max)
P      <-  Omega / sum(Omega)
return(P)
}
Y1.A.P       <-  Lib.Arb.Unif.Weight(Y1.N)
Y1.A.P
Lib.ProbMat
source("C:/Users/Justin/Documents/GitHub/RLibrary/Start.R")
Lib.ProbVec()
Lib.ProbVec
Lib.Arb.Unif.Weight
Y1.A.P
Y1.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y1.N))
Y1.A.P
Lib.Arb.Unif.Weight(Y1.N)
Y1.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y1.N))
Y1.A.P
Y1.A.N       <-  table(Lib.ProbVec(X = Y1.A.P, n = A.N))
Y1.A.N
Y1.A.N
A.Y1         <-  rep(seq(1, Y1.N), Y1.A.N)
table(A.Y1)
X1           <- unlist(mapply(rnorm, as.list(Y1.A.N),
as.list(Y1.Mu.X1),
as.list(Y1.Sig.X1), SIMPLIFY = FALSE))
X1
tapply(X1, Y1, mean )
tapply(X1, A.Y1, mean )
Y1.Mu.X1
tapply(X1, A.Y1, sd )
Y1.Sig.X1
X1
Lib.PowerLaw()
Lib.PowerLaw()
Lib.PowerLaw
Lib.PowerLaw   <-  function(u, Min, Alpha, n){
if(missing(n))    {n     <- 1}
if(missing(Min))  {Min   <-  1}
if(missing(Alpha)){Alpha <-  2}
if(missing(u))    {u     <-  runif(n)}
return(Min * ((1 - u)^(1 / (1 - Alpha))))
}
Lib.PowerLaw()
Lib.PowerLaw()n=5
Lib.PowerLaw(n = 5)
Y2.N         <-  4
Y2.Alpha.X1  <-  runif(Y2.N, 1.5, 5)
Y2.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y2.N))
Y2.A.N       <-  table(Lib.ProbVec(X = Y2.A.P, n = A.N))
A.Y2         <-  rep(seq(1, Y1.N), Y1.A.N)
A.Y2         <-  rep(seq(1, Y2.N), Y2.A.N)
A.Y2
X2           <- unlist(mapply(Lib.PowerLaw, n = as.list(Y1.A.N),
Alpha = as.list(Y2.Alpha.X1),
SIMPLIFY = FALSE))
X2           <- unlist(mapply(Lib.PowerLaw, n = as.list(Y2.A.N),
Alpha = as.list(Y2.Alpha.X1),
SIMPLIFY = FALSE))
X3           <- abs(X1)
X4           <- X2 * c(1,-1)[ceiling(runif(A.N,0,2))]
sum(X4 < 0)
X1
X4
Lib.BarPlot.Stacked()
Lib.BarPlot.Stacked
X   <-  X1
Range   <-  Lib.Axis.Range(X)
Range
X      <-  X2
N      <-  20
# Histogram Plot
Range   <-  Lib.Axis.Range(X)
Range
X      <-  X3
N      <-  20
# Histogram Plot
Range   <-  Lib.Axis.Range(X)
Range
X      <-  X4
N      <-  20
# Histogram Plot
Range   <-  Lib.Axis.Range(X)
Range
Lib.Axis.Range
Lib.Axis.Range(X)
Range   <-  Lib.Axis.Range(X)$Lim
Breaks  <-  seq(Range[1], Range[2], (Range[2] - Range[1]) / N - 1)
Breaks
Range
Breaks  <-  seq(Range[1], Range[2], (Range[2] - Range[1]) / (N - 1))
Breaks
Hist    <-  Lib.Hist.Breaks(X, Breaks)
Hist
Breaks  <-  signif(seq(Range[1], Range[2], (Range[2] - Range[1]) / (N - 1)), 3)
Breaks
Breaks  <-  signif(seq(Range[1], Range[2], (Range[2] - Range[1]) / (N - 1)), 2)
Breaks
X.Axis    <-  Lib.Axis.Range(X)
Range     <-  X.Axis(X)$Lim
Breaks    <-  signif(seq(Range[1], Range[2], (Range[2] - Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(X, Breaks)
Range     <-  X.Axis$Lim
Range
X.Axis
plot(Hist$Centres, Hist$Counts, type = 'h' )
plot(Hist$Centres, Hist$Counts, type = 'h' )
plot(Hist$Centres, Hist$Counts, type = 'h' )
Lib.Recall()
Lib.Plot.Blank()
Y.Axis    <-  Lib.Axis(Hist$Counts)
Y.Axis
X      <-  X1
N      <-  21
# Histogram Plot
if(missing(N)){  N <- 21}
X.Axis    <-  Lib.Axis.Range(X)
Range     <-  X.Axis$Lim
Breaks    <-  signif(seq(Range[1], Range[2], (Range[2] - Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Lib.Plot.Blank(X1 = )
plot(Hist$Centres, Hist$Counts, type = 'h' )
N      <-  51
# Histogram Plot
if(missing(N)){  N <- 21}
X.Axis    <-  Lib.Axis.Range(X)
Range     <-  X.Axis$Lim
Breaks    <-  signif(seq(Range[1], Range[2], (Range[2] - Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Y.Axis
X.Axis
Lib.Plot.Blank(X0 = X.Range[1], X1 = X.Range[2], Y0 = Y.Axis$Lim[1], Y0 = Y.Axis$Lim[2] )
Lib.Plot.Blank(X0 = X.Range[1], X1 = X.Range[2], Y0 = Y.Axis$Lim[1], Y1 = Y.Axis$Lim[2] )
X.Axis    <-  Lib.Axis.Range(X)
X.Range   <-  X.Axis$Lim
Breaks    <-  signif(seq(X.Range[1], X.Range[2], (X.Range[2] - X.Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Title     <-  "Histogram of X"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Title = Title
)
Title     <-  "Histogram of X"
X.Lab     <-  "Bin Centres"
Y.Lab     <-  "Counts"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Title = Title,
Xlab  = X.Lab,
Ylab  = Y.Lab
)
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Main  = Title,
Xlab  = X.Lab,
Ylab  = Y.Lab
)
X.Lab
X.Lab
Lib.Plot.Blank
Title     <-  "Histogram of X"
X.Lab     <-  "Bin Centres"
Y.Lab     <-  "Counts"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Main  = Title,
Xlab  = X.Lab,
Ylab  = Y.Lab
)
Lib.Plot.Blank
Lib.Plot.Blank
X.Lab
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Xlab  = X.Lab,
Ylab  = Y.Lab,
Main  = Title,
)
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Xlab  = X.Lab,
Ylab  = Y.Lab,
Main  = Title
)
par()$mar
