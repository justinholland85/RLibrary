}
######################################################################################################
Lib.ProbVec <-  function(u, X, n){
N          <-  length(X)
if(missing(n)){n  <-  1}
if(missing(u)){u  <-  runif(n)}
Y   <-  1 * (0 < u & u <= X[1])
for(i in 2:N){
Y  <- Y + i *  (X[i-1] < u & u <= X[i])
}
return(Y)
}
######################################################################################################
# Mu:    Household
# Phi:   Loc Visits
# Sigma: The size parameter for location
# source("/rab3/Playground/Justin/Code/R Library/Start.R")
source("C:/Users/justi/Documents/GitHub/RLibrary/Start.R")
######################################################################################################
F.Distance   <-  function(X0, Y0, X1, Y1){
return(((X1 - X0) ^ 2 + (Y1 - Y0) ^ 2)^0.5)
}
######################################################################################################
dX            <-  100
dY            <-  100
N.A           <-  10000
N.Mu          <-  N.A / 4
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Age classes:
#  1: Child
#  2: Young Adult
#  3: Adult
#  4: Elderly
A.ID          <-  seq(1, N.A)
A.Mu          <-  ceiling(runif(N.A, 0, N.Mu))
A.Age         <-  ceiling(runif(N.A, 0, 4))
Mu.ID         <-  seq(1, N.Mu)
Mu.X          <-  runif(N.Mu, 0, dX)
Mu.Y          <-  runif(N.Mu, 0, dY)
A.Mu.X        <-  Mu.X[A.Mu]
A.Mu.Y        <-  Mu.Y[A.Mu]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Site Classes:
#  S1: School
#  S2: Work
#  S3: University
#  S4: Social (Cafes, Pubs)
#  S5: Shop
S1.N      <-  20
S1.X      <-  runif(S1.N, 0, dX)
S1.Y      <-  runif(S1.N, 0, dY)
S1.Sigma  <-  rpois(S1.N, 10)
#----
S2.N    <-  50
S2.X    <-  runif(S2.N, 0, dX)
S2.Y    <-  runif(S2.N, 0, dY)
S2.Sigma  <-  rpois(S2.N, 10)
#----
S3.N    <-  3
S3.X    <-  runif(S3.N, 0, dX)
S3.Y    <-  runif(S3.N, 0, dY)
S2.Sigma  <-  rpois(S1.N, 10)
#----
S4.N    <-  100
S4.X    <-  runif(S4.N, 0, dX)
S4.Y    <-  runif(S4.N, 0, dY)
#----
S5.N    <-  100
S5.X    <-  runif(S5.N, 0, dX)
S5.Y    <-  runif(S5.N, 0, dY)
######################################################################################################
# Rules
# All children have a school,  probability based on 1 / R
# All adults have a work site, probability based on 1 / log(1 + R)
# All young adults have a University, probability based on 1 / log(1 + R, 4)
# People have a social parameter S4.Lambda, which will feed into a poisson variable Z
# Z is the number of social sites they visit
# social sites are weighted at 1 / log(1 + R, 1.5)
#----------------------------------------------------------------------------------------------------#
# School Selection
A.S1.Delta   <-   array(dim=c(N.A, S1.N))
for(i in 1:S1.N){
A.S1.Delta[ ,i]  <- F.Distance(A.Mu.X, A.Mu.Y, S1.X[i], S1.Y[i])
}
A.S1.Omega   <-  1 / A.S1.Delta
A.S1.Omega   <-  A.S1.Omega / rowSums(A.S1.Omega)
A.S1.U       <-  Lib.CumSum(A.S1.Omega)
A.S1         <-  (A.Age == 1) * Lib.ProbMat(A.S1.U)
A.p.S1       <-  rep(1, N.A)
#----------------------------------------------------------------------------------------------------#
# Work selection
A.S2.Delta   <-   array(dim=c(N.A, S2.N))
for(i in 1:S2.N){
A.S2.Delta[ ,i]  <- F.Distance(A.Mu.X, A.Mu.Y, S2.X[i], S2.Y[i])
}
A.S2.Omega   <-  1 / log(1 + A.S2.Delta)
A.S2.Omega   <-  A.S2.Omega / rowSums(A.S2.Omega)
A.S2.U       <-  Lib.CumSum(A.S2.Omega)
A.S2         <-  (A.Age == 3) * Lib.ProbMat(A.S2.U)
A.p.S2       <-  rep(1, N.A)
#----------------------------------------------------------------------------------------------------#
# University selection
A.S3.Delta   <-   array(dim=c(N.A, S3.N))
for(i in 1:S3.N){
A.S3.Delta[ ,i]  <- F.Distance(A.Mu.X, A.Mu.Y, S3.X[i], S3.Y[i])
}
A.S3.Omega   <-  1 / log(1 + A.S3.Delta, 4)
A.S3.Omega   <-  A.S3.Omega / rowSums(A.S3.Omega)
A.S3.U       <-  Lib.CumSum(A.S3.Omega)
A.S3         <-  (A.Age == 2) * Lib.ProbMat(A.S3.U)
A.p.S3       <-  rep(1, N.A)
#----------------------------------------------------------------------------------------------------#
# Social Behaviour
A.S4.Lambda  <- round(Lib.PowerLaw(runif(N.A), Min = 1, Alpha = 3.5))
A.S4.Delta   <-   array(dim=c(N.A, S4.N))
for(i in 1:S4.N){
A.S4.Delta[ ,i]  <- F.Distance(A.Mu.X, A.Mu.Y, S4.X[i], S4.Y[i])
}
A.S4.Omega   <-  1 / log(1 + A.S4.Delta, 1.5)
A.S4.Omega   <-  A.S4.Omega / rowSums(A.S4.Omega)
A.S4.U       <-  Lib.CumSum(A.S4.Omega)
#---
F.S4.Simulate      <-  function(A.S4.Lambda, A.S4.U){
A.S4.Poi      <-  rpois(N.A, A.S4.Lambda)
A.S4.U        <-  Lib.RowsToList(A.S4.U)
A.S4          <-  mapply(Lib.ProbVec, X = A.S4.U, n = as.list(A.S4.Poi))
return(A.S4)
}
A.p.S4       <-  rep(1, N.A)
#----------------------------------------------------------------------------------------------------#
# Shopping Behaviour
A.S5.Lambda  <- round(Lib.PowerLaw(runif(N.A), Min = 1, Alpha = 4))
A.S5.Delta   <-   array(dim=c(N.A, S5.N))
for(i in 1:S5.N){
A.S5.Delta[ ,i]  <- F.Distance(A.Mu.X, A.Mu.Y, S5.X[i], S5.Y[i])
}
A.S5.Omega   <-  1 / log(1 + A.S5.Delta, 1.5)
A.S5.Omega   <-  A.S5.Omega / rowSums(A.S5.Omega)
A.S5.U       <-  Lib.CumSum(A.S5.Omega)
#---
F.S5.Simulate      <-  function(A.S5.Lambda, A.S5.U){
A.S5.Poi      <-  rpois(N.A, A.S5.Lambda)
A.S5.U        <-  Lib.RowsToList(A.S5.U)
A.S5          <-  mapply(Lib.ProbVec, X = A.S5.U, n = as.list(A.S5.Poi))
return(A.S5)
}
A.p.S5       <-  rep(1, N.A)
######################################################################################################
# Simulate Location Visits
F.Sim.Locs   <-  function(A.ID,
A.S1,
A.S2,
A.S3,
A.S4.Lambda,
A.S4.U,
A.S5.Lambda,
A.S5.U,
A.p.S1,
A.p.S2,
A.p.S3,
A.p.S4,
A.p.S5){
A.N    <-  length(A.ID)
#--- S1
A.S1       <-  A.S1 * (runif(A.N) <= A.p.S1)
S1.A.ID    <-  A.ID[which(A.S1 > 0)]
S1.ID      <-  A.S1[which(A.S1 > 0)]
S1.S       <-  rep(1, sum(A.S1 > 0))
#--- S2
A.S2       <-  A.S2 * (runif(A.N) <= A.p.S2)
S2.A.ID    <-  A.ID[which(A.S2 > 0)]
S2.ID      <-  A.S2[which(A.S2 > 0)]
S2.S       <-  rep(2, sum(A.S2 > 0))
#--- S3
A.S3       <-  A.S3 * (runif(A.N) <= A.p.S3)
S3.A.ID    <-  A.ID[which(A.S3 > 0)]
S3.ID      <-  A.S3[which(A.S3 > 0)]
S3.S       <-  rep(3, sum(A.S3 > 0))
#--- S4
A.S4       <-  F.S4.Simulate(A.S4.Lambda, A.S4.U)
A.A4.N     <-  lapply(A.S4, length)
t.S4.A.ID  <-  rep(A.ID, A.A4.N)
t.S4.ID    <-  unlist(A.S4)
t.S4.p     <-  rep(A.p.S4, A.A4.N)
Keep       <-  which(runif(length(t.S4.A.ID)) <= t.S4.p)
S4.A.ID    <-  t.S4.A.ID[Keep]
S4.ID      <-  t.S4.ID[Keep]
S4.S       <-  rep(4, length(Keep))
#--- S5
A.S5       <-  F.S4.Simulate(A.S5.Lambda, A.S5.U)
A.A5.N     <-  lapply(A.S5, length)
t.S5.A.ID  <-  rep(A.ID, A.A5.N)
t.S5.ID    <-  unlist(A.S5)
t.S5.p     <-  rep(A.p.S5, A.A5.N)
Keep       <-  which(runif(length(t.S5.A.ID)) <= t.S5.p)
S5.A.ID    <-  t.S5.A.ID[Keep]
S5.ID      <-  t.S5.ID[Keep]
S5.S       <-  rep(5, length(Keep))
#---
L.A.ID     <-  c(S1.A.ID,
S2.A.ID,
S3.A.ID,
S4.A.ID,
S5.A.ID)
L.S.ID     <-  c(S1.ID,
S2.ID,
S3.ID,
S4.ID,
S5.ID)
L.S        <-  c(S1.S,
S2.S,
S3.S,
S4.S,
S5.S)
DF         <-  data.frame("A.ID" = L.A.ID,
"S"    = L.S,
"S.ID" = L.S.ID)
return(DF)
}
######################################################################################################
######################################################################################################
Phi                <-  F.Sim.Locs(A.ID,
A.S1,
A.S2,
A.S3,
A.S4.Lambda,
A.S4.U,
A.S5.Lambda,
A.S5.U,
A.p.S1,
A.p.S2,
A.p.S3,
A.p.S4,
A.p.S5)
######################################################################################################
Test  <-  rgamma(100000,shape = 1, scale = 1 )
Test.1.1  <-  rgamma(100000,shape = 1, scale = 1 )
Table.1.1   <-  table(Test.1.1)
Table.1.1
Test.1.1  <-  round(rgamma(100000,shape = 1, scale = 1 ))
Table.1.1   <-  table(Test.1.1)
Table.1.1
N   <-   100000
plot(X.Lim, Y.Lim, type = 'n', xlab = "", ylab = "", bty = 'n')
X.Lim   <-  c(0,50)
Y.Lim   <-  c(0, .2)
X.Lim   <-  c(0,50)
Y.Lim   <-  c(0, .2)
plot(X.Lim, Y.Lim, type = 'n', xlab = "", ylab = "", bty = 'n')
Colours
b.ColourScheme(24,5,V=.8, Alpha = .6)
Colours   <-  Lib.ColourScheme(24,5,V=.8, Alpha = .6)
X.Lim   <-  c(0,50)
Y.Lim   <-  c(0, .2)
plot(X.Lim, Y.Lim, type = 'n', xlab = "", ylab = "", bty = 'n')
Lib.NumericNames(Table.1.1), Table.1.1, type = 'l', col = Colours[1,i], lwd = 2)
Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
Test    <-  round(rgamma(N ,shape = i, scale = 1 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
i  <-  1
Test    <-  round(rgamma(N ,shape = i, scale = 1 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
i  <-  10
Test    <-  round(rgamma(N ,shape = i, scale = 1 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
i  <-  15
Test    <-  round(rgamma(N ,shape = i, scale = 1 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
i  <-  15
Test    <-  round(rgamma(N ,shape = i, scale = 2 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
Count      <- Lib.Tuple.Count(L.S.ID, L.S)$Count
F.Sim.Locs   <-  function(A.ID,
A.S1,
A.S2,
A.S3,
A.S4.Lambda,
A.S4.U,
A.S5.Lambda,
A.S5.U,
A.p.S1,
A.p.S2,
A.p.S3,
A.p.S4,
A.p.S5){
A.N    <-  length(A.ID)
#--- S1
A.S1       <-  A.S1 * (runif(A.N) <= A.p.S1)
S1.A.ID    <-  A.ID[which(A.S1 > 0)]
S1.ID      <-  A.S1[which(A.S1 > 0)]
S1.S       <-  rep(1, sum(A.S1 > 0))
#--- S2
A.S2       <-  A.S2 * (runif(A.N) <= A.p.S2)
S2.A.ID    <-  A.ID[which(A.S2 > 0)]
S2.ID      <-  A.S2[which(A.S2 > 0)]
S2.S       <-  rep(2, sum(A.S2 > 0))
#--- S3
A.S3       <-  A.S3 * (runif(A.N) <= A.p.S3)
S3.A.ID    <-  A.ID[which(A.S3 > 0)]
S3.ID      <-  A.S3[which(A.S3 > 0)]
S3.S       <-  rep(3, sum(A.S3 > 0))
#--- S4
A.S4       <-  F.S4.Simulate(A.S4.Lambda, A.S4.U)
A.A4.N     <-  lapply(A.S4, length)
t.S4.A.ID  <-  rep(A.ID, A.A4.N)
t.S4.ID    <-  unlist(A.S4)
t.S4.p     <-  rep(A.p.S4, A.A4.N)
Keep       <-  which(runif(length(t.S4.A.ID)) <= t.S4.p)
S4.A.ID    <-  t.S4.A.ID[Keep]
S4.ID      <-  t.S4.ID[Keep]
S4.S       <-  rep(4, length(Keep))
#--- S5
A.S5       <-  F.S4.Simulate(A.S5.Lambda, A.S5.U)
A.A5.N     <-  lapply(A.S5, length)
t.S5.A.ID  <-  rep(A.ID, A.A5.N)
t.S5.ID    <-  unlist(A.S5)
t.S5.p     <-  rep(A.p.S5, A.A5.N)
Keep       <-  which(runif(length(t.S5.A.ID)) <= t.S5.p)
S5.A.ID    <-  t.S5.A.ID[Keep]
S5.ID      <-  t.S5.ID[Keep]
S5.S       <-  rep(5, length(Keep))
#---
L.A.ID     <-  c(S1.A.ID,
S2.A.ID,
S3.A.ID,
S4.A.ID,
S5.A.ID)
L.S.ID     <-  c(S1.ID,
S2.ID,
S3.ID,
S4.ID,
S5.ID)
L.S        <-  c(S1.S,
S2.S,
S3.S,
S4.S,
S5.S)
Count      <- Lib.Tuple.Count(L.S.ID, L.S)$Count
DF         <-  data.frame("A.ID" = L.A.ID,
"S"    = L.S,
"S.ID" = L.S.ID,
"N"    = Count)
return(DF)
}
Phi                <-  F.Sim.Locs(A.ID,
A.S1,
A.S2,
A.S3,
A.S4.Lambda,
A.S4.U,
A.S5.Lambda,
A.S5.U,
A.p.S1,
A.p.S2,
A.p.S3,
A.p.S4,
A.p.S5)
head(Phi)
S1.Sigma
Test    <-  round(rgamma(N ,shape = 1.25, scale = 2 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
plot(X.Lim, Y.Lim, type = 'n', xlab = "", ylab = "", bty = 'n')
Test    <-  round(rgamma(N ,shape = 1, scale = 1 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
i  <-  5
Test    <-  round(rgamma(N ,shape = 1.25, scale = 1 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
i  <-  5
Test    <-  round(rgamma(N ,shape = 5, scale = 1 ))
Table   <-  table(Test)/N
points(Lib.NumericNames(Table), Table, type = 'l', col = Colours[1,i], lwd = 2)
S4.Sigma
S1.Sigma
F.Sim.Locs   <-  function(A.ID,
A.S1,
A.S2,
A.S3,
A.S4.Lambda,
A.S4.U,
A.S5.Lambda,
A.S5.U,
A.p.S1,
A.p.S2,
A.p.S3,
A.p.S4,
A.p.S5,
S1.Sigma,
S2.Sigma,
S3.Sigma,
S4.Sigma,
S5.Sigma){
A.N        <-  length(A.ID)
#--- S1
A.S1       <-  A.S1 * (runif(A.N) <= A.p.S1)
S1.A.ID    <-  A.ID[which(A.S1 > 0)]
S1.ID      <-  A.S1[which(A.S1 > 0)]
S1.S       <-  rep(1, sum(A.S1 > 0))
S1.Sigma   <-  S1.Sigma[S1.ID]
#--- S2
A.S2       <-  A.S2 * (runif(A.N) <= A.p.S2)
S2.A.ID    <-  A.ID[which(A.S2 > 0)]
S2.ID      <-  A.S2[which(A.S2 > 0)]
S2.S       <-  rep(2, sum(A.S2 > 0))
S2.Sigma   <-  S2.Sigma[S2.ID]
#--- S3
A.S3       <-  A.S3 * (runif(A.N) <= A.p.S3)
S3.A.ID    <-  A.ID[which(A.S3 > 0)]
S3.ID      <-  A.S3[which(A.S3 > 0)]
S3.S       <-  rep(3, sum(A.S3 > 0))
S3.Sigma   <-  S3.Sigma[S3.ID]
#--- S4
A.S4       <-  F.S4.Simulate(A.S4.Lambda, A.S4.U)
A.A4.N     <-  lapply(A.S4, length)
t.S4.A.ID  <-  rep(A.ID, A.A4.N)
t.S4.ID    <-  unlist(A.S4)
t.S4.p     <-  rep(A.p.S4, A.A4.N)
Keep       <-  which(runif(length(t.S4.A.ID)) <= t.S4.p)
S4.A.ID    <-  t.S4.A.ID[Keep]
S4.ID      <-  t.S4.ID[Keep]
S4.S       <-  rep(4, length(Keep))
S4.Sigma   <-  S4.Sigma[S4.ID]
#--- S5
A.S5       <-  F.S4.Simulate(A.S5.Lambda, A.S5.U)
A.A5.N     <-  lapply(A.S5, length)
t.S5.A.ID  <-  rep(A.ID, A.A5.N)
t.S5.ID    <-  unlist(A.S5)
t.S5.p     <-  rep(A.p.S5, A.A5.N)
Keep       <-  which(runif(length(t.S5.A.ID)) <= t.S5.p)
S5.A.ID    <-  t.S5.A.ID[Keep]
S5.ID      <-  t.S5.ID[Keep]
S5.S       <-  rep(5, length(Keep))
S5.Sigma   <-  S5.Sigma[S5.ID]
#---
L.A.ID     <-  c(S1.A.ID,
S2.A.ID,
S3.A.ID,
S4.A.ID,
S5.A.ID)
L.S.ID     <-  c(S1.ID,
S2.ID,
S3.ID,
S4.ID,
S5.ID)
L.S        <-  c(S1.S,
S2.S,
S3.S,
S4.S,
S5.S)
L.Sigma    <-  c(S1.Sigma,
S2.Sigma,
S3.Sigma,
S4.Sigma,
S5.Sigma)
Count      <- Lib.Tuple.Count(L.S.ID, L.S)$Count
DF         <-  data.frame("A.ID"    = L.A.ID,
"S"       = L.S,
"S.ID"    = L.S.ID,
"L.Sigma" = L.Sigma,
"N"       = Count)
return(DF)
}
Phi                <-  F.Sim.Locs(A.ID,
A.S1,
A.S2,
A.S3,
A.S4.Lambda,
A.S4.U,
A.S5.Lambda,
A.S5.U,
A.p.S1,
A.p.S2,
A.p.S3,
A.p.S4,
A.p.S5,
S1.Sigma,
S2.Sigma,
S3.Sigma,
S4.Sigma,
S5.Sigma)
S5.Sigma  <-  rpois(S5.N, 15)
S4.Sigma  <-  rpois(S4.N, 15)
S3.Sigma  <-  rpois(S3.N, 15)
S2.Sigma  <-  rpois(S2.N, 10)
S1.Sigma  <-  rpois(S1.N, 10)
Phi                <-  F.Sim.Locs(A.ID,
A.S1,
A.S2,
A.S3,
A.S4.Lambda,
A.S4.U,
A.S5.Lambda,
A.S5.U,
A.p.S1,
A.p.S2,
A.p.S3,
A.p.S4,
A.p.S5,
S1.Sigma,
S2.Sigma,
S3.Sigma,
S4.Sigma,
S5.Sigma)
head(Phi)
