D.dT.2  <-  P.Y + W
D0  <-  T.0 * D.dT.0
X.a  <-  0
X.b  <-  100
Y.a  <-  100
Y.b  <-  200
P.X   <-  1
P.Y   <-  0
W     <-  1
R     <-  10
D.dT.0  <-  P.X
D.dT.1  <-  P.X + W
D.dT.2  <-  P.Y + W
T.0  <-  R
D0  <-  T.0 * D.dT.0
D0
D0  <-  pmin(T.0 * D.dT.0, X.b)
D0
D0.Max  <-  T.0 * D.dT.0
D0.Max
T0.a    <-  0
T0.b    <-  R
T0.r    <-  D.dT.0
T0.b
T0.D.b  <-  D0.Max
T0.D.b
dT1     <-  (X.b - T0.D.b) / D.dT.1
dT1
T1.b    <-   T0.b + dT1
T1.b
D.dT.1
D.dT.2
dT2     <-  Y.b / D.dT.2
T2.b    <-  T1.b + dT2
dT2
dT2     <-  (Y.b - X.b) / D.dT.2
T2.b    <-  T1.b + dT2
T2.b
dT2
T2.b
X.a  <-  0
X.b  <-  100
Y.a  <-  100
Y.b  <-  200
P.X   <-  1
P.Y   <-  0
W     <-  1
R     <-  0
D.dT.0  <-  P.X
D.dT.1  <-  P.X + W
D.dT.2  <-  P.Y + W
D0.Max  <-  T.0 * D.dT.0
T0.a    <-  0
T0.b    <-  R
T0.r    <-  D.dT.0
T0.D.b  <-  D0.Max
dT1     <-  (X.b - T0.D.b) / D.dT.1
T1.b    <-  T0.b + dT1
T1.r    <-  D.dT.1
dT2     <-  (Y.b - X.b) / D.dT.2
T2.b    <-  T1.b + dT2
T2.b
X.a  <-  0
X.b  <-  100
Y.a  <-  100
Y.b  <-  200
P.X   <-  1
P.Y   <-  0
W     <-  1
R     <-  10
D.dT.0  <-  P.X
D.dT.1  <-  P.X + W
D.dT.2  <-  P.Y + W
D0.Max  <-  T.0 * D.dT.0
T0.a    <-  0
T0.b    <-  R
T0.r    <-  D.dT.0
T0.D.b  <-  D0.Max
dT1     <-  (X.b - T0.D.b) / D.dT.1
T1.b    <-  T0.b + dT1
T1.r    <-  D.dT.1
dT2     <-  (Y.b - X.b) / D.dT.2
T2.b    <-  T1.b + dT2
T2.b
X.a  <-  0
X.b  <-  100
Y.a  <-  100
Y.b  <-  200
P.X   <-  0
P.Y   <-  1
W     <-  1
R     <-  10
D.dT.0  <-  P.X
D.dT.1  <-  P.X + W
D.dT.2  <-  P.Y + W
D0.Max  <-  T.0 * D.dT.0
T0.a    <-  0
T0.b    <-  R
T0.r    <-  D.dT.0
T0.D.b  <-  D0.Max
dT1     <-  (X.b - T0.D.b) / D.dT.1
T1.b    <-  T0.b + dT1
T1.r    <-  D.dT.1
dT2     <-  (Y.b - X.b) / D.dT.2
T2.b    <-  T1.b + dT2
T2.b
X.a  <-  0
X.b  <-  100
Y.a  <-  100
Y.b  <-  200
P.X   <-  1
P.Y   <-  0
W     <-  1
R     <-  10
D.dT.0  <-  P.X
D.dT.1  <-  P.X + W
D.dT.2  <-  P.Y + W
D0.Max  <-  T.0 * D.dT.0
T0.a    <-  0
T0.b    <-  R
T0.r    <-  D.dT.0
T0.D.b  <-  D0.Max
dT1     <-  (X.b - T0.D.b) / D.dT.1
T1.b    <-  T0.b + dT1
T1.r    <-  D.dT.1
dT2     <-  (Y.b - X.b) / D.dT.2
T2.b    <-  T1.b + dT2
T2.b
N.Sets         <-  100
S.Size          <-  round(runif(N.Sets, 0, 20))
S.Size
S.Size          <-  ceiling(runif(N.Sets, 0, 20))
S.Size
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
runif(10,0,seq(1,10))
dbinom(50, size = 100, prob = .5)
dbinom(50, size = 100, prob = 0)
dbinom(1, size = 2, prob = .5)
dbinom(1, size = 1, prob = .5)
dbinom(1, size = 3, prob = .5)
dbinom(0, size = 2, prob = .5)
dbinom(2, size = 2, prob = .5)
X.N    <-  100
X      <-  seq(1, 100)
X.Mass <-  rep(1, X.N)
X.Mass
N.Sets         <-  100
S.Size          <-  ceiling(runif(N.Sets, 0, 20))
S.Size
S.N             <-  100
S.Size          <-  ceiling(runif(S.N, 0, 20))
S.Size
Rand   <-  runif(X.N, 0, X.Mass)
Rand
Ordered  <-  X[order(Rand, decreasing = TRUE)]
Ordered
S  <-  list()
for(i in 1:S.N){
Rand     <-  runif(X.N, 0, X.Mass)
Ordered  <-  X[order(Rand, decreasing = TRUE)]
S[[i]]   <-  Ordered[1:S.Size[i]]
}
S
T.s         <-  ceiling(runif(1),0, S.N)
T.s         <-  ceiling(runif(1,0, S.N))
T.s
T.s     <-  S[T.s.ref]
T.s.ref <-  ceiling(runif(1,0, S.N))
T.s     <-  S[T.s.ref]
T.s
T.s     <-  S[[T.s.ref]]
T.s.n   <-  length(T.s)
S.Size[T.s.ref]
D.rand   <-  ceiling(runif(D.n, 0, T.s.n))
D.n      <-  1
D.rand   <-  ceiling(runif(D.n, 0, T.s.n))
D.rand
D        <-  T.s[D.rand]
D
Prior    <-  rep(1, S.N)
Prior
Prior.Weight    <-  rep(1, S.N)
Prior           <-  Prior.Weight / sum(Prior.Weight)
Prior
Likelihood      <-  (1 / S.Size) ^ D.n
Likelihood
source("C:/Users/Justin/Documents/GitHub/RLibrary/Start.R")
A.N <-  10000
#----
Y1.N         <-  6
Y1.Mu.X1     <-  runif(Y1.N, -5, 5)
Y1.Sig.X1    <-  runif(Y1.N, 1, 10)
Y1.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y1.N))
Y1.A.N       <-  table(Lib.ProbVec(X = Y1.A.P, n = A.N))
A.Y1         <-  rep(seq(1, Y1.N), Y1.A.N)
#----
Y2.N         <-  4
Y2.Alpha.X1  <-  runif(Y2.N, 1.5, 5)
Y2.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y2.N))
Y2.A.N       <-  table(Lib.ProbVec(X = Y2.A.P, n = A.N))
A.Y2         <-  rep(seq(1, Y2.N), Y2.A.N)
X1           <- unlist(mapply(rnorm, as.list(Y1.A.N),
as.list(Y1.Mu.X1),
as.list(Y1.Sig.X1), SIMPLIFY = FALSE))
X2           <- unlist(mapply(Lib.PowerLaw, n = as.list(Y2.A.N),
Alpha = as.list(Y2.Alpha.X1),
SIMPLIFY = FALSE))
X3           <- abs(X1)
X4           <- X2 * c(1,-1)[ceiling(runif(A.N,0,2))]
X5           <-  -X3
# Arbitrary Uniform Weight
Lib.Arb.Unif.Weight <-  function(N, Min, Max){
if(missing(Min)){Min  <-  1}
if(missing(Max)){Max  <-  100}
Omega  <-  runif(N, Min, Max)
P      <-  Omega / sum(Omega)
return(P)
}
A.N <-  10000
#----
Y1.N         <-  6
Y1.Mu.X1     <-  runif(Y1.N, -5, 5)
Y1.Sig.X1    <-  runif(Y1.N, 1, 10)
Y1.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y1.N))
Y1.A.N       <-  table(Lib.ProbVec(X = Y1.A.P, n = A.N))
A.Y1         <-  rep(seq(1, Y1.N), Y1.A.N)
#----
Y2.N         <-  4
Y2.Alpha.X1  <-  runif(Y2.N, 1.5, 5)
Y2.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y2.N))
Y2.A.N       <-  table(Lib.ProbVec(X = Y2.A.P, n = A.N))
A.Y2         <-  rep(seq(1, Y2.N), Y2.A.N)
X1           <- unlist(mapply(rnorm, as.list(Y1.A.N),
as.list(Y1.Mu.X1),
as.list(Y1.Sig.X1), SIMPLIFY = FALSE))
X2           <- unlist(mapply(Lib.PowerLaw, n = as.list(Y2.A.N),
Alpha = as.list(Y2.Alpha.X1),
SIMPLIFY = FALSE))
X3           <- abs(X1)
X4           <- X2 * c(1,-1)[ceiling(runif(A.N,0,2))]
X5           <-  -X3
source("C:/Users/Justin/Documents/GitHub/RLibrary/Start.R")
X      <-  X6
N      <-  51
# Histogram Plot
if(missing(N)){  N <- 51}
X.Axis    <-  Lib.Axis.Smart(X)
X.Range   <-  X.Axis$Lim
Breaks    <-  signif(seq(X.Range[1], X.Range[2], (X.Range[2] - X.Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Title     <-  "Histogram of X"
X.Lab     <-  "Bin Centres"
Y.Lab     <-  "Counts"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Xlab  = X.Lab,
Ylab  = Y.Lab,
Main  = Title
)
Lib.PlotLines.Y(Y.Axis$Axis, X.Lim = X.Range)
Lib.PlotLines.X(X.Axis$Axis, Col = "transparent")
points(Hist$Centres, Hist$Counts, type = 'h' )
points(Hist$Centres, Hist$Counts, pch = 21, bg = "blue" )
######################################################################################################
# Histogram Log Plot
X      <-  X1
N      <-  51
Log.X     <-  Lib.LogScale.Smart(X)
X.Axis    <-  Lib.Axis.Smart(Log.X)
X.Range   <-  X.Axis$Lim
Breaks    <-  signif(seq(X.Range[1], X.Range[2], (X.Range[2] - X.Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(Log.X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Title     <-  "Histogram of X"
X.Lab     <-  "Bin Centres"
Y.Lab     <-  "Counts"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Xlab  = X.Lab,
Ylab  = Y.Lab,
Main  = Title
)
Lib.PlotLines.Y(Y.Axis$Axis, X.Lim = X.Range)
Lib.PlotLogLines.X(X.Lim = X.Range , Y.Lim =  Y.Axis$Lim )
points(Hist$Centres, Hist$Counts, type = 'h' )
points(Hist$Centres, Hist$Counts, pch = 21, bg = "blue" )
Hist   <- Lib.LogHist(X)
TrueVals   <-  Hist$Centres
Col <-  Lib.ColourScheme.ExpCol(36, 5, Alpha = .7, ExpCol = 24, K = 6, Plot = 0)[3,3]
Lwd <- 1
Lty <- 2
MaxPos   <-  ceiling(log(max(X), 10))
MaxNeg   <-  ceiling(log(max(abs(X[which(X < 0)])), 10))
Min      <-  -1
PosSeq   <-  Lib.LogLines.True(Min, MaxPos)
NegSeq   <-  lapply(Lib.LogLines.True(Min, MaxNeg), rev)
Center.Gap     <- .05
MagPoints.Neg  <-  NegSeq$Axt.Tick.Val
MagPoints.Pos  <-  PosSeq$Axt.Tick.Val
MagPoints  <-  c(MagPoints.Neg, 0, MagPoints.Pos)
N.Mags     <-  length(MagPoints)
N.Mags.Neg <-  length(MagPoints.Neg)
N.Mags.Pos <-  length(MagPoints.Pos)
MagScale   <-  (1 - Center.Gap) / (N.Mags - 3)
MapToScale.Neg  <-  (MagPoints.Neg[1] -  NegSeq$Axt.Lines.LogVal) * MagScale
MapToScale.Pos  <-  MagScale * (N.Mags.Neg - 1) + Center.Gap +
(PosSeq$Axt.Lines.LogVal - MagPoints.Pos[1]) * MagScale
N.LinesNeg  <-  length(MapToScale.Neg)
N.LinesPos  <-  length(MapToScale.Pos)
Axis.Neg.Ticks  <-   (MagPoints.Neg[1] - MagPoints.Neg) * MagScale
Axis.Neg.Labels <-  paste0("-", NegSeq$Axt.Tick.Label )
Axis.Pos.Ticks  <-    MagScale * (N.Mags.Neg - 1) + Center.Gap +
(MagPoints.Pos -  MagPoints.Pos[1]) * MagScale
Axis.Pos.Labels <-   PosSeq$Axt.Tick.Label
Lib.Plot.Blank()
par(xpd = NA)
axis(1, at = Axis.Neg.Ticks, labels = NA, cex.axis = .75)
text(Axis.Neg.Ticks, -.15, labels = Axis.Neg.Labels, srt = 90 )
axis(1, at = Axis.Pos.Ticks, labels = NA, cex.axis = .75)
text(Axis.Pos.Ticks, -.15, labels = Axis.Pos.Labels, srt = 90 )
#--- plot negative lines
for(i in 1:N.LinesNeg){
points(c(MapToScale.Neg[i], MapToScale.Neg[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = Col)
}
#--- plot N.LinesPos lines
for(i in 1:N.LinesPos){
points(c(MapToScale.Pos[i], MapToScale.Pos[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = Col)
}
Lib.Plot.Blank()
#--- plot negative lines
for(i in 1:N.LinesNeg){
points(c(MapToScale.Neg[i], MapToScale.Neg[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = Col)
}
Lib.Plot.Blank
Col <-  Lib.ColourScheme.ExpCol(36, 5, Alpha = .7, ExpCol = 24, K = 6, Plot = 0)[1,3]
Col <-  Lib.ColourScheme.ExpCol(36, 5, Alpha = .7, ExpCol = 24, K = 6, Plot = 0)[1,3]
Col <-  Lib.ColourScheme.ExpCol(36, 5, Alpha = .7, ExpCol = 24, K = 6, Plot = 0)[1,3]
#--- plot negative lines
for(i in 1:N.LinesNeg){
points(c(MapToScale.Neg[i], MapToScale.Neg[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = Col)
}
Lib.Plot.Blank()
par(xpd = NA)
axis(1, at = Axis.Neg.Ticks, labels = NA, cex.axis = .75)
text(Axis.Neg.Ticks, -.15, labels = Axis.Neg.Labels, srt = 90 )
axis(1, at = Axis.Pos.Ticks, labels = NA, cex.axis = .75)
text(Axis.Pos.Ticks, -.15, labels = Axis.Pos.Labels, srt = 90 )
#--- plot negative lines
for(i in 1:N.LinesNeg){
points(c(MapToScale.Neg[i], MapToScale.Neg[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = Col)
}
MapToScale.Neg
Lib.Plot.Blank
X      <-  X1
N      <-  51
Log.X     <-  Lib.LogScale.Smart(X)
X.Axis    <-  Lib.Axis.Smart(Log.X)
X.Range   <-  X.Axis$Lim
Breaks    <-  signif(seq(X.Range[1], X.Range[2], (X.Range[2] - X.Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(Log.X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Title     <-  "Histogram of X"
X.Lab     <-  "Bin Centres"
Y.Lab     <-  "Counts"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Xlab  = X.Lab,
Ylab  = Y.Lab,
Main  = Title
)
Lib.PlotLines.Y(Y.Axis$Axis, X.Lim = X.Range)
Lib.PlotLogLines.X(X.Lim = X.Range , Y.Lim =  Y.Axis$Lim )
points(Hist$Centres, Hist$Counts, type = 'h' )
points(Hist$Centres, Hist$Counts, pch = 21, bg = "blue" )
Lib.ColourScheme.ExpCol
Lib.ColourScheme.ExpCol(36, 5, Alpha = .7, ExpCol = 24, K = 6,
BG= "white",  Plot = 1)
Col <-  Lib.ColourScheme.ExpCol(36, 5, Alpha = .7, ExpCol = 24, K = 6,
BG= "white",  Plot = 1)[3,3]
Col
Lib.Plot.Blank()
par(xpd = NA)
axis(1, at = Axis.Neg.Ticks, labels = NA, cex.axis = .75)
text(Axis.Neg.Ticks, -.15, labels = Axis.Neg.Labels, srt = 90 )
axis(1, at = Axis.Pos.Ticks, labels = NA, cex.axis = .75)
text(Axis.Pos.Ticks, -.15, labels = Axis.Pos.Labels, srt = 90 )
Col
polygon(c(0,0, .5, .5), c(0,.5,.5,0), col = Col)
N.LinesNeg
MapToScale.Neg
MapToScale.Neg
MapToScale.Pos
#--- plot N.LinesPos lines
for(i in 1:N.LinesPos){
points(c(MapToScale.Pos[i], MapToScale.Pos[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = Col)
}
Lty
Lwd
for(i in 1:N.LinesPos){
points(c(MapToScale.Pos[i], MapToScale.Pos[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = "Col"black)
}
for(i in 1:N.LinesPos){
points(c(MapToScale.Pos[i], MapToScale.Pos[i]), c(0, 1),
type='l', lwd=Lwd, lty = Lty, col = "black")
}
rm(list = ls())
source("C:/Users/Justin/Documents/GitHub/RLibrary/Start.R")
A.N <-  10000
#----
Y1.N         <-  6
Y1.Mu.X1     <-  runif(Y1.N, -5, 5)
Y1.Sig.X1    <-  runif(Y1.N, 1, 10)
Y1.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y1.N))
Y1.A.N       <-  table(Lib.ProbVec(X = Y1.A.P, n = A.N))
A.Y1         <-  rep(seq(1, Y1.N), Y1.A.N)
#----
Y2.N         <-  4
Y2.Alpha.X1  <-  runif(Y2.N, 1.5, 5)
Y2.A.P       <-  cumsum(Lib.Arb.Unif.Weight(Y2.N))
Y2.A.N       <-  table(Lib.ProbVec(X = Y2.A.P, n = A.N))
A.Y2         <-  rep(seq(1, Y2.N), Y2.A.N)
X1           <- unlist(mapply(rnorm, as.list(Y1.A.N),
as.list(Y1.Mu.X1),
as.list(Y1.Sig.X1), SIMPLIFY = FALSE))
X2           <- unlist(mapply(Lib.PowerLaw, n = as.list(Y2.A.N),
Alpha = as.list(Y2.Alpha.X1),
SIMPLIFY = FALSE))
X3           <- abs(X1)
X4           <- X2 * c(1,-1)[ceiling(runif(A.N,0,2))]
X5           <-  -X3
# Histogram Plot
if(missing(N)){  N <- 51}
X.Axis    <-  Lib.Axis.Smart(X)
X.Range   <-  X.Axis$Lim
Breaks    <-  signif(seq(X.Range[1], X.Range[2], (X.Range[2] - X.Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Title     <-  "Histogram of X"
X.Lab     <-  "Bin Centres"
Y.Lab     <-  "Counts"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Xlab  = X.Lab,
Ylab  = Y.Lab,
Main  = Title
)
Lib.PlotLines.Y(Y.Axis$Axis, X.Lim = X.Range)
Lib.PlotLines.X(X.Axis$Axis, Col = "transparent")
points(Hist$Centres, Hist$Counts, type = 'h' )
points(Hist$Centres, Hist$Counts, pch = 21, bg = "blue" )
X      <-  X1
N      <-  51
Log.X     <-  Lib.LogScale.Smart(X)
X.Axis    <-  Lib.Axis.Smart(Log.X)
X.Range   <-  X.Axis$Lim
Breaks    <-  signif(seq(X.Range[1], X.Range[2], (X.Range[2] - X.Range[1]) / (N - 1)), 2)
Hist      <-  Lib.Hist.Breaks(Log.X, Breaks)
Y.Axis    <-  Lib.Axis(Hist$Counts)
Title     <-  "Histogram of X"
X.Lab     <-  "Bin Centres"
Y.Lab     <-  "Counts"
Lib.Plot.Blank(X0    = X.Range[1],
X1    = X.Range[2],
Y0    = Y.Axis$Lim[1],
Y1    = Y.Axis$Lim[2],
Xlab  = X.Lab,
Ylab  = Y.Lab,
Main  = Title
)
Lib.PlotLines.Y(Y.Axis$Axis, X.Lim = X.Range)
Lib.PlotLogLines.X(X.Lim = X.Range , Y.Lim =  Y.Axis$Lim )
points(Hist$Centres, Hist$Counts, type = 'h' )
points(Hist$Centres, Hist$Counts, pch = 21, bg = "blue" )
