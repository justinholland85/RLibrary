######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# F.Utility
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
F.Utility   <-  function(dT, Alpha, Lambda, Tau){
U  <-  sum(Alpha * Lambda^((seq(0, dT-1) / Tau) )) / Tau
return(U)
}
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# F.Dist
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
F.Dist    <- function(I.x, I.y, x, y){
return( ((I.x  - x) ^ 2 + (I.y - y) ^ 2)^.5)
}
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# F.Triangulate
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
F.Triangulate    <-  function(I.x, I.y, g.x, g.y, h.x, h.y){
d1             <-  F.Dist(I.x, I.y, g.x, g.y)
d2             <-  F.Dist(g.x, g.y, h.x, h.y)
d3             <-  F.Dist(h.x, h.y, I.x, I.y)
d              <-  d1 +  d2 + d3
return(d)
}
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# F.Cost
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
F.Cost            <-  function(I.x, I.y, Market.g, Market.h, I.P.d){
N.g               <-  length(Market.g[[1]])
N.h               <-  length(Market.h[[1]])
Pairwise          <-  expand.grid(h = seq(1, N.h), g = seq(1, N.g))[,c('g', 'h')]
Pairwise$P.g      <-  Market.g$P[Pairwise$g]
Pairwise$P.h      <-  Market.h$P[Pairwise$h]
Pairwise$g.x      <-  Market.g$x[Pairwise$g]
Pairwise$g.y      <-  Market.g$y[Pairwise$g]
Pairwise$h.x      <-  Market.h$x[Pairwise$h]
Pairwise$h.y      <-  Market.h$y[Pairwise$h]
Pairwise$I.x      <-  I.x
Pairwise$I.y      <-  I.y
Pairwise$d.TriPol <-  F.Triangulate(Pairwise$I.x,
Pairwise$I.y,
Pairwise$g.x,
Pairwise$g.y,
Pairwise$h.x,
Pairwise$h.y)
Pairwise$d.BiPol  <-  F.Triangulate(Pairwise$I.x,
Pairwise$I.y,
Pairwise$g.x,
Pairwise$g.y,
Pairwise$I.x,
Pairwise$I.y)
Pairwise$c.t.h    <-  Pairwise$d.TriPol * Pairwise$P.h
Pairwise$c.t.s    <-  Pairwise$d.TriPol * I.P.d
Pairwise$c.h      <-  Pairwise$c.t.h + Pairwise$P.g
Pairwise$c.s      <-  Pairwise$c.t.s + Pairwise$P.g
Pairwise$h.Pref   <-  Pairwise$c.h  < Pairwise$c.s
Pairwise$c        <-  pmin(Pairwise$c.h  , Pairwise$c.s )
c.Min             <-  min(Pairwise$c)
c.Which           <-  which(Pairwise$c == c.Min)[1]
Opt.g             <-  Pairwise$g[c.Which]
Opt.h             <-  Pairwise$h[c.Which]
Opt.s             <-  !Pairwise$h.Pref[c.Which]
Cost              <-  c.Min
Opt.c.g           <-  Pairwise$P.g[c.Which]
Opt.c.t.h         <-  Pairwise$c.t.h[c.Which]
Opt.c.t.s         <-  Pairwise$c.t.s[c.Which]
Cost.Cash         <-  Opt.c.g + Opt.c.t.h * (!Opt.s)
Output            <-  list("Pairwise"   = Pairwise,
"g"          = Opt.g,
"h"          = Opt.h * (!Opt.s),
"s"          = Opt.s,
"c.g"        = Opt.c.g,
"c.t.h"      = Opt.c.t.h,
"c.t.s"      = Opt.c.t.s,
"Cost"       = Cost,
"Cost.Cash"  = Cost.Cash,
"Row"        = c.Which
)
return(Output)
}
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
#
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
# source("C:/Users/justi/Documents/GitHub/RLibrary/Start.R")
source("C:/Users/justi/OneDrive/Documents/GitHub/RLibrary/Start.R")
options(scipen = 99)
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# Market setup
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
# Market setup
N.Test      <-  10
Max.x       <-  100
Max.y       <-  100
g.x         <-  Max.x  * runif(N.Test, -1, 1)
g.y         <-  Max.y  * runif(N.Test, -1, 1)
g.P         <-  runif(N.Test, 1, 5)
Market.g    <-   list("x" = g.x,
"y" = g.y,
"P" = g.P)
h.x         <-  Max.x  * runif(N.Test, -1, 1)
h.y         <-  Max.y  * runif(N.Test, -1, 1)
h.P         <-  runif(N.Test, 0, .1 / 100)
Market.h    <-   list("x" = h.x,
"y" = h.y,
"P" = h.P)
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# Demo of Triangulate
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
I.x         <-  0
I.y         <-  0
I.dist      <-  F.Dist(I.x, I.y, g.x, g.y)
g   <-  1
h   <-  1
g.x   <-  Market.g$x[g]
g.y   <-  Market.g$y[g]
h.x   <-  Market.h$x[h]
h.y   <-  Market.h$y[h]
F.Triangulate(I.x, I.y, g.x, g.y, h.x, h.y)
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# Demo of F.Cost
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
I.x         <-  0
I.y         <-  0
I.P.d       <-  1/100
Cost        <-  F.Cost(I.x, I.y, Market.g, Market.h, I.P.d)
######################################################################################################
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\#
# Setting up for Individual production decision
#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/#
######################################################################################################
N.g          <-  3
I.Rho.g      <-  runif(N.g, 0, 1) / 10
I.Rho.h      <-  runif(1,1,10)
Gamma.g.T    <-  c(0,0,0)
#====================================================================================================#
# Market setup
#====================================================================================================#
N.Points     <-  20
Max.x        <-  100
Max.y        <-  100
Point.x      <-  Max.x  * runif(N.Points, -1, 1)
Point.y      <-  Max.y  * runif(N.Points, -1, 1)
Point.g      <-  round(N.g * runif(N.Points))
Point.P      <-  runif(N.Points, 1, 10) / 100^(Point.g == 0)
I.x          <-  0
I.y          <-  0
I.P.d        <-  1/100
I.P.u        <-  10
#====================================================================================================#
# Single good market
#====================================================================================================#
Which.h     <-  which(Point.g == 0)
h.x         <-  Point.x[Which.h]
h.y         <-  Point.y[Which.h]
h.P         <-  Point.P[Which.h]
Market.h    <-   list("x" = h.x,
"y" = h.y,
"P" = h.P)
g           <-  1
Which.g     <-  which(Point.g == g)
g.x         <-  Point.x[Which.g]
g.y         <-  Point.y[Which.g]
g.P         <-  Point.P[Which.g]
Market.g    <-   list("x" = g.x,
"y" = g.y,
"P" = g.P)
#====================================================================================================#
#
#====================================================================================================#
N.g           <-  3
I.dT.g        <-  rep(0, N.g)
I.dT.l        <-  0
I.Lambda.g    <-  runif(N.g, 0 ,1)
I.Lambda.l    <-  runif(1, 0 ,1)
I.Alpha.g     <-  runif(N.g, 0, 10)
I.Alpha.l     <-  runif(1, 0, 10)
I.Rho.g       <-  runif(N.g, 0, 1) / 10
I.Rho.h       <-  runif(1 ,1, 10)
Tau           <-  1
I.P.u         <-  1
I.P.g.s       <-  rep(0, N.g)
I.C.g.b       <-  rep(Inf, N.g)
### i.u
i.u.g         <-  numeric(0)
for(i in 1:N.g){
i.u.g[[i]]   <-  F.Utility(I.dT.g[[i]], I.Alpha.g[[i]], I.Lambda.g[[i]], Tau)
}
i.u.l          <-  F.Utility(I.dT.l, I.Alpha.l, I.Lambda.l, Tau)
### du.dt
du.dt.g        <-  I.Rho.g * i.u.g
du.dt.l        <-  i.u.l
I.V.g.w        <-  pmax(I.P.g.s,
pmin(i.u.g * I.Rho.g * I.P.u,
I.C.g.b))
Max.I.V.g.w    <-  max(I.V.g.w)
x.Prod         <-  which(I.V.g.w == Max.I.V.g.w)[1]
x.Prod
Max.I.V.g.w
I.V.g.w
du.dt.g
du.dt.l
I.P.u
I.V.g.w
Max.I.V.g.w
du.dt.g
du.dt.l
du.dt.g
I.Rho.g
i.u.g
F.Utility
I.dT.g        <-  rep(0, N.g)
I.dT.l        <-  0
I.Lambda.g
I.P.g.s
I.C.g.b
i.u.g
Max.I.V.g.w
I.Inv         <-  rep(0, N.g)
I.P.g.s
I.V.g.w
I.P.g.s
i.u.g
I.V.g.c        <-   i.u.g * I.P.u
I.V.g.c
I.P.Inv        <-   pmin(pmax(I.P.g.s, I.V.g.c), I.C.g.b)
I.P.Inv
I.P.g.s
I.V.g.c
I.P.Inv
I.P.g.s
I.V.g.c
I.C.g.b
ifelse(I.Inv >=1, 0, Inf)
I.P.Inv        <-   pmax(pmin(pmax(I.P.g.s, I.V.g.c), I.C.g.b), ifelse(I.Inv >=1, 0, Inf))
I.P.Inv
